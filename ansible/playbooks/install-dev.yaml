---
- name: Dev Setup
  hosts: all
  become: false
  vars:
    kitty_macos_installation_dir: /Applications/kitty.app/
    kitty_linux_installation_dir: ~/.local/kitty.app/
  tags:
    - dev
  tasks:
    - name: Clone dotfiles if not done
      ansible.builtin.git:
        repo: 'https://github.com/csd1100/dotfiles'
        dest: "~/dotfiles"
        version: main
      tags:
        - dotfiles
        - always

    - name: Set fact to become or not
      block:
        - name: Set become to true for linux
          when: ansible_system == "Linux"
          ansible.builtin.set_fact:
            become_value: true
          tags:
            - linux
            - fedora
            - ubuntu

        - name: Set become to false for darwin
          when: ansible_system == "Darwin"
          ansible.builtin.set_fact:
            become_value: false
          tags:
            - darwin

    - name: Install kitty
      tags:
        - kitty
      block:
        - name: Install ImageMagick dependency
          block:
            - name: Install imagemagick on Debian and Darwin
              become: "{{ become_value }}"
              when: ansible_os_family == 'Debian' or ansible_os_family == 'Darwin'
              ansible.builtin.package:
                name: imagemagick
                state: present
              tags:
                - darwin
                - ubuntu
                - linux

            - name: Install ImageMagick on Fedora
              become: true
              when: ansible_os_family == 'RedHat'
              ansible.builtin.dnf:
                name: ImageMagick
                state: present
              tags:
                - fedora
                - linux

        - name: Set kitty installation directory for linux
          when: (ansible_os_family == "RedHat") or (ansible_os_family == "Debian")
          ansible.builtin.set_fact:
            kitty_installation_dir: "{{ kitty_linux_installation_dir }}"
          tags:
            - fedora
            - ubuntu
            - linux

        - name: Set kitty installation directory for macos
          when: (ansible_os_family == "Darwin")
          ansible.builtin.set_fact:
            kitty_installation_dir: "{{ kitty_macos_installation_dir }}"
          tags:
            - darwin

        - name: Install kitty
          ansible.builtin.shell: |
            set -o pipefail
            curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
          args:
            creates: "{{ kitty_installation_dir }}"
            executable: /bin/bash
          tags:
            - fedora
            - ubuntu
            - darwin
            - linux

        - name: Create kitty desktop file
          ansible.builtin.shell: cd ~/dotfiles/kitty/.config/kitty && ./kitty-desktop
          when: (ansible_os_family == "RedHat") or (ansible_os_family == "Debian")
          args:
            creates: ~/.local/share/applications/kitty.desktop
          tags:
            - fedora
            - ubuntu
            - linux

    - name: Install jdk
      tags:
        - jdk
      block:
        - name: Debian install jdk 11, 17
          become: true
          when: ansible_os_family == 'Debian'
          ansible.builtin.apt:
            name:
              - openjdk-11-jdk
              - openjdk-17-jdk
          tags:
            - ubuntu

        - name: RedHat install jdk 11, 17
          become: true
          when: ansible_os_family == 'RedHat'
          ansible.builtin.dnf:
            name:
              - java-11-openjdk
              - java-17-openjdk
          tags:
            - fedora

        - name: Darwin install jdk 11, 17, 21
          when: ansible_os_family == 'Darwin'
          community.general.homebrew:
            name:
              - openjdk
              - openjdk@11
              - openjdk@17
          tags:
            - darwin

        - name: Darwin link brew jdk
          when: ansible_os_family == 'Darwin'
          become: true
          ansible.builtin.file:
            src: "/opt/homebrew/opt/openjdk/libexec/openjdk.jdk"
            dest: "/Library/Java/JavaVirtualMachines/openjdk.jdk"
            state: link
          tags:
            - darwin

    - name: Install node 18, 20
      tags:
        - node
        - darwin
        - linux
        - fedora
        - ubuntu
      block:
        - name: Install nvm
          ansible.builtin.shell: |
            set -o pipefail
            PROFILE=/dev/null curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | /bin/bash
          args:
            creates: ~/.nvm/
            executable: /bin/bash

        - name: Load nvm and install node 18, 20
          ansible.builtin.shell:
            export NVM_DIR="$HOME/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install lts/hydrogen;
            nvm install lts/iron &&
            nvm alias default lts/iron
          args:
            executable: /bin/bash

        - name: Validate node is installed
          ansible.builtin.shell: |
            set -o pipefail
            export NVM_DIR="$HOME/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm use lts/iron &&
            nvm use lts/hydrogen &&
            nvm use default &&
            node --version | grep "v20"
          args:
            executable: /bin/bash

    - name: Install golang
      tags:
        - golang
      block:
        - name: Install golang linux
          when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
          tags:
            - linux
            - fedora
            - ubuntu
          block:
            - name: Fetch latest go version
              ansible.builtin.uri:
                url: https://go.dev/VERSION?m=text
                return_content: true
              register: go_version_op

            - name: Store go version
              ansible.builtin.set_fact:
                go_version: "{{ go_version_op.content | regex_search('^.*') }}"

            - name: Download go
              ansible.builtin.get_url:
                url: https://go.dev/dl/{{ go_version }}.linux-amd64.tar.gz
                dest: /tmp/{{ go_version }}.linux-amd64.tar.gz
                mode: '644'

            - name: Remove previous go
              become: true
              ansible.builtin.file:
                state: absent
                path: /usr/local/go/

            - name: Linux install go
              become: true
              ansible.builtin.unarchive:
                src: /tmp/{{ go_version }}.linux-amd64.tar.gz
                dest: /usr/local/
                remote_src: true

            - name: Validate go is installed
              ansible.builtin.shell: |
                set -o pipefail
                /usr/local/go/bin/go version | grep "{{ go_version }}"
              args:
                executable: /bin/bash

        - name: Install golang mac
          when: ansible_os_family == 'Darwin'
          community.general.homebrew:
            name: golang
          tags:
            - darwin

    - name: Install rust
      tags:
        - rust
        - darwin
        - linux
        - fedora
        - ubuntu
      block:
        - name: Install rust using rustup
          ansible.builtin.shell: |
            set -o pipefail
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            executable: /bin/bash
            creates: ~/.rustup/

        - name: Validate rust is installed
          ansible.builtin.command:
            ~/.cargo/bin/rustc --version

    - name: Install docker linux
      when: ansible_system == "Linux"
      tags:
        - docker
        - linux
      block:
        - name: Ubuntu Docker Setup
          become: true
          when: ansible_distribution == 'Ubuntu'
          tags:
            - ubuntu
          block:
            - name: Add apt docker gpg key
              ansible.builtin.apt_key:
                url: https://download.docker.com/linux/ubuntu/gpg
                state: present
            - name: Add apt docker repository
              ansible.builtin.apt_repository:
                repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
                state: present

        - name: Fedora docker setup
          become: true
          when: ansible_distribution == 'Fedora'
          tags:
            - fedora
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/fedora/docker-ce.repo
            dest: /etc/yum.repos.d/docer-ce.repo
            mode: '644'

        - name: Install docker
          become: true
          ansible.builtin.package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
          tags:
            - fedora
            - ubuntu

        - name: Add docker usergroup
          become: true
          ansible.builtin.group:
            name: docker
            state: present
            gid: 1750
          tags:
            - fedora
            - ubuntu

        - name: Add user to docker group
          become: true
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            append: true
            groups: docker
          tags:
            - fedora
            - ubuntu

        - name: Enable docker service
          become: true
          ansible.builtin.systemd:
            name: docker
            state: started
            enabled: true
          tags:
            - fedora
            - ubuntu

    - name: Install neovim nightly
      tags:
        - nvim
      block:
        - name: Nvim dependencies
          become: "{{ become_value }}"
          ansible.builtin.package:
            name:
              - luajit
              - luarocks
          tags:
            - nvim-deps
            - linux
            - darwin
            - fedora
            - ubuntu

        - name: Install neovim linux
          when: ansible_system == "Linux"
          tags:
            - linux
          block:
            - name: Add neovim apt ppa
              become: true
              when: ansible_os_family == 'Debian'
              ansible.builtin.apt_repository:
                repo: ppa:neovim-ppa/unstable
              tags:
                - ubuntu

            - name: Add neovim dnf copr
              become: true
              when: ansible_os_family == 'RedHat'
              community.general.copr:
                name: agriffis/neovim-nightly
              tags:
                - fedora

            - name: Install neovim Linux
              become: true
              ansible.builtin.package:
                name:
                  - neovim
                  - python3-neovim
              tags:
                - fedora
                - ubuntu

        - name: Install neovim Darwin
          when: ansible_system == "Darwin"
          community.general.homebrew:
            name: nvim
            state: head
          tags:
            - darwin
