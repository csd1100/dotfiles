---
- name: Dev Setup
  hosts: all
  connection: local
  become: false
  vars:
    kitty_macos_installation_dir: /Applications/kitty.app/
    kitty_linux_installation_dir: ~/.local/kitty.app/
  tags:
    - dev
  tasks:
    - name: Set fact to become or not
      tags:
        - kitty
      block:
        - name: Set become to true for linux
          when: ansible_system == "Linux"
          ansible.builtin.set_fact:
            become_value: true

        - name: Set become to false for darwin
          when: ansible_system == "Darwin"
          ansible.builtin.set_fact:
            become_value: false

    - name: Install kitty
      tags:
        - kitty
        - gui
        - work
      block:
        - name: Install ImageMagick dependency
          block:
            - name: Install imagemagick on Debian and Darwin
              become: "{{ become_value }}"
              when: ansible_os_family == 'Debian' or ansible_os_family == 'Darwin'
              ansible.builtin.package:
                name: imagemagick
                state: present

            - name: Install ImageMagick on Fedora
              become: true
              when: ansible_os_family == 'RedHat'
              ansible.builtin.dnf:
                name: ImageMagick
                state: present

        - name: Set kitty installation directory for linux
          when: (ansible_os_family == "RedHat") or (ansible_os_family == "Debian")
          ansible.builtin.set_fact:
            kitty_installation_dir: "{{ kitty_linux_installation_dir }}"

        - name: Set kitty installation directory for macos
          when: (ansible_os_family == "Darwin")
          ansible.builtin.set_fact:
            kitty_installation_dir: "{{ kitty_macos_installation_dir }}"

        - name: Install kitty
          ansible.builtin.shell: |
            set -o pipefail
            curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
          args:
            creates: "{{ kitty_installation_dir }}"
            executable: /bin/bash

        - name: Create kitty desktop file
          block:
            - name: Create necessary directories
              ansible.builtin.file:
                path: ~/.local/share/applications/
                state: "directory"
                recurse: true

            - name: Create kitty desktop file
              ansible.builtin.shell: cd ~/dotfiles/scripts/helpers && ./kitty-desktop
              when: (ansible_os_family == "RedHat") or (ansible_os_family == "Debian")
              args:
                creates: ~/.local/share/applications/kitty.desktop

    - name: Install jdk
      tags:
        - jdk
        - work
      block:
        - name: Debian install jdk 21
          become: true
          when: ansible_distribution == 'Ubuntu'
          ansible.builtin.apt:
            name:
              - openjdk-21-jdk # FIXME: not available debian

        - name: RedHat install jdk 21
          become: true
          when: ansible_os_family == 'RedHat'
          ansible.builtin.dnf:
            name:
              - java-21-openjdk

        - name: Darwin install jdk 21
          when: ansible_os_family == 'Darwin'
          community.general.homebrew:
            name:
              - openjdk@21

        - name: Darwin link brew jdk
          when: ansible_os_family == 'Darwin'
          become: true
          ansible.builtin.file:
            src: "/opt/homebrew/opt/openjdk/libexec/openjdk.jdk"
            dest: "/Library/Java/JavaVirtualMachines/openjdk.jdk"
            state: link

    - name: Install node 20
      tags:
        - node
        - work
      block:
        - name: Install volta
          ansible.builtin.shell: |
            set -o pipefail
            PROFILE=/dev/null curl https://get.volta.sh | /bin/bash
          args:
            creates: ~/.volta/
            executable: /bin/bash

        - name: Load volta and install 20
          ansible.builtin.shell:
            $HOME/.volta/bin/volta install node@20
          args:
            executable: /bin/bash
            creates: ~/.volta/bin/node

    - name: Install golang
      tags:
        - golang
      block:
        - name: Install golang linux
          when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
          block:
            - name: Fetch latest go version
              ansible.builtin.uri:
                url: https://go.dev/VERSION?m=text
                return_content: true
              register: go_version_op

            - name: Store go version
              ansible.builtin.set_fact:
                go_version: "{{ go_version_op.content | regex_search('^.*') }}"

            - name: Download and Install go if not latest
              block:
                - name: Validate go is installed
                  ansible.builtin.shell: |
                    set -o pipefail
                    /usr/local/go/bin/go version | grep "{{ go_version }}" && touch /tmp/go-version
                  args:
                    executable: /bin/bash
                    creates: /tmp/go-version
              rescue:
                - name: Download go
                  ansible.builtin.get_url:
                    url: https://go.dev/dl/{{ go_version }}.linux-amd64.tar.gz
                    dest: /tmp/{{ go_version }}.linux-amd64.tar.gz
                    timeout: 120
                    mode: '0644'

                - name: Remove previous go
                  become: true
                  ansible.builtin.file:
                    state: absent
                    path: /usr/local/go/

                - name: Linux install go
                  become: true
                  ansible.builtin.unarchive:
                    src: /tmp/{{ go_version }}.linux-amd64.tar.gz
                    dest: /usr/local/
                    remote_src: true

        - name: Install golang mac
          when: ansible_os_family == 'Darwin'
          community.general.homebrew:
            name: golang

    - name: Install rust
      tags:
        - rust
      block:
        - name: Install rust using rustup
          ansible.builtin.shell: |
            set -o pipefail
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            executable: /bin/bash
            creates: ~/.rustup/

    - name: Install python
      tags:
        - python
        - work
      block:
        - name: Install pyenv
          ansible.builtin.shell: |
            set -o pipefail
            curl -fsSL https://pyenv.run | bash
          args:
            executable: /bin/bash
            creates: ~/.pyenv/

        - name: Install python 3.13
          ansible.builtin.shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init - bash)"
            pyenv install 3.13.2
            pyenv global 3.13.2
          args:
            executable: /bin/bash
            creates: ~/.pyenv/versions/3.13.2

    - name: Install docker linux
      when: ansible_system == "Linux"
      tags:
        - docker
        - work
      block:
        - name: Ubuntu Docker Setup
          become: true
          when: ansible_distribution == 'Ubuntu'
          block:
            - name: Add apt docker gpg key
              ansible.builtin.apt_key:
                url: https://download.docker.com/linux/ubuntu/gpg
                state: present
            - name: Add apt docker repository
              ansible.builtin.apt_repository:
                repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
                state: present

        - name: Fedora docker setup
          become: true
          when: ansible_distribution == 'Fedora'
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/fedora/docker-ce.repo
            dest: /etc/yum.repos.d/docer-ce.repo
            timeout: 120
            mode: '0644'

        - name: Install docker
          become: true
          ansible.builtin.package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin

        - name: Add docker usergroup
          become: true
          ansible.builtin.group:
            name: docker
            state: present
            gid: 1750

        - name: Add user to docker group
          become: true
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            append: true
            groups: docker

        - name: Enable docker service
          become: true
          ansible.builtin.systemd:
            name: docker
            state: started
            enabled: true

    - name: Install neovim nightly
      tags:
        - nvim
        - work
      block:
        - name: Nvim dependencies
          become: "{{ become_value }}"
          ansible.builtin.package:
            name:
              - luajit
              - luarocks

        - name: Install neovim linux
          when: ansible_system == "Linux"
          block:
            - name: Add neovim apt ppa
              become: true
              when: ansible_distribution == 'Ubuntu' # FIXME: does not work on debian
              ansible.builtin.apt_repository:
                repo: ppa:neovim-ppa/unstable

            - name: Add neovim dnf copr
              become: true
              when: ansible_os_family == 'RedHat'
              community.general.copr:
                name: agriffis/neovim-nightly

            - name: Install neovim Linux
              become: true
              ansible.builtin.package:
                name:
                  - neovim
                  - python3-neovim

        - name: Install neovim Darwin
          when: ansible_system == "Darwin"
          community.general.homebrew:
            name: nvim
            state: head

    - name: Install VSCodium
      tags:
        - vscodium
        - gui
        - work
      block:
        - name: Install VSCodium on Fedora
          when: ansible_os_family == "RedHat"
          block:
            - name: Add GPG key of VSCodium
              become: "{{ become_value }}"
              ansible.builtin.rpm_key:
                state: present
                key: https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg

            - name: Add Fedora VSCodium Repository
              become: "{{ become_value }}"
              ansible.builtin.copy:
                content: |
                  [gitlab.com_paulcarroty_vscodium_repo]
                  name=download.vscodium.com
                  baseurl=https://download.vscodium.com/rpms/
                  enabled=1
                  gpgcheck=1
                  repo_gpgcheck=1
                  gpgkey=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg
                  metadata_expire=1h
                dest: /etc/yum.repos.d/vscodium.repo
                mode: '0644'

        - name: Install VSCodium on Ubuntu
          when: ansible_os_family == "Debian"
          block:
            - name: Add GPG key of VSCodium
              become: "{{ become_value }}"
              ansible.builtin.apt_key:
                url: https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg
                state: present

            - name: Add Apt VSCodium Repository
              become: "{{ become_value }}"
              ansible.builtin.copy:
                content: |
                  deb https://download.vscodium.com/debs vscodium main
                dest: /etc/apt/sources.list.d/vscodium.list
                mode: '0644'

        - name: Install VSCodium
          become: "{{ become_value }}"
          when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
          ansible.builtin.package:
            update_cache: true
            name:
              - codium

        - name: Install VSCodium Darwin
          when: ansible_system == "Darwin"
          community.general.homebrew:
            name: vscodium

        - name: Install VSCodium Extensions
          ansible.builtin.command: ~/dotfiles/bin/bin/helpers/vscode-extension-setup
          args:
            creates: /tmp/vscode-setup
